# canon.yaml ‚Äì The authoritative specification for the Chronomancy project
# All comments beginning with `#` are considered docstrings and cite
# justifications from the Chronomancy editorial collective (üèµÔ∏èy e s hüèµÔ∏è, d0ublezer0,
# Samim, Kat, Mat1e). These five authors form the single source of truth.
#
# Editorial Note: "A memetically-optimized system must make the unknown
# emotionally irresistible while demanding the smallest possible activation energy
# from the participant."

project:
  name: "Chronomancy"
  codename: "Project 3.4"  # Editorial Note: Internal codenames preserve lineage while freeing public branding.
  tagline: "A random-alarm gateway to perceiving time's hidden patterns"
  status: "Practical phase ‚Äî public launch prep"
  provenance:
    primary_author: "üèµÔ∏èy e s hüèµÔ∏è"
    contributing_authors:
      - "d0ublezer0"
      - "Samim"
      - "Kat"
      - "Mat1e"
    last_updated: "2025-06-25T11:43:00Z"
    license: "CC-BY-SA 4.0"

# -----------------------------------------------------------------------------
# Mission & Goals
# -----------------------------------------------------------------------------
mission:
  primary: "Shift exploratory attention from geographic space (Randonautica) to the temporal dimension (Chronomancy)."
  secondary:
    - "Demonstrate reproducibility of the Randonautica model."
    - "Quantify how the stasis field behaves along the time axis."
    - "Engineer a massive cultural-memetic impact."
    - "Channel material income into the rhizome economy."
  rationale: |
    Editorial Note: Novel modalities of exploration re-energize the memeplex;
    moving from space to time gives us a fresh axis of wonder without the
    logistical drag of travel.

# -----------------------------------------------------------------------------
# Concept Overview
# -----------------------------------------------------------------------------
concept:
  synopsis: |
    If Randonautica is to Ingress what Chronomancy will be to Pok√©mon Go, then our
    mission is to turn an experimental curiosity into an everyday practice.

    The product is a self-contained smartphone app that emits random temporal
    pings‚Äîfunctionally a 'random alarm clock.'  When the signal fires, the user
    pauses, observes, and documents anomalies in their surroundings.  Because no
    travel is required, participation scales friction-free and the server load is
    near-zero.
  memetic_edge: "Easier than a trip, richer than a push-notification."
  mascot_symbol: "White Rabbit holding a pocket-watch"  # Carrollian imagery signals playful time distortion.

# -----------------------------------------------------------------------------
# Design Principles
# -----------------------------------------------------------------------------
design_principles:
  memetic_efficiency: "Every interaction should be screenshot-worthy and share-ready."
  zero_friction: "Setup in <60 seconds; no login required for core loop."
  autonomy: "All randomization and scheduling executed client-side to avoid scaling drag."
  hype_reset: "Launching as a fresh brand sidesteps legacy inertia and reignites curiosity."

# -----------------------------------------------------------------------------
# User Experience Flow & Engagement Strategy
# -----------------------------------------------------------------------------
ux_guidelines:
  night_mode_recommendation: "Encourage focus on strange sounds when alarms ring in low visibility."
  surprise_factors_priority:
    order: [low_visibility, strange_sounds, unexpected_encounters, perceived_risk]
  content_prompting: "Immediately surface share sheet or social feed on alarm acknowledge."
  safety_opt_out: "Allow users to snooze/disable alarms while driving or in meetings."

engagement_strategy:
  initial_experience: |
    Users receive one initial ping to experience the core loop. If they leave the
    app installed, subsequent random pings occur infrequently to maintain
    engagement without annoyance‚Äîjust enough to generate strange field effects.
  retention_balance: |
    Editorial Note: Better to annoy some people with recurring alarms than have
    20 million people use it once. The goal is sustained temporal attention
    disruption, not viral flash-in-the-pan usage.

# -----------------------------------------------------------------------------
# Ping Mechanics & Temporal Architecture
# -----------------------------------------------------------------------------
ping_system:
  daily_ping_quota:
    description: "Users control how many pings they receive per day"
    interface: |
      You are about to receive [2] pings today. Add +1. Remove -1.
      Mute for...[  ]
    controls:
      - "Add +1 button to increase daily ping count"
      - "Remove -1 button to decrease daily ping count"
      - "Mute for [duration] to temporarily pause all pings"
      - "Queue management for users who want more pings on demand"

  synchronous_ping_generation:
    description: |
      First ping of each day follows synchronous logic to create global coordination
      while maintaining individual user preferences.
    algorithm: |
      1. Generate random time during whole day using current date as seed
      2. Check if time falls outside user's available timeframe (e.g., earlier than now)
      3. If out of range OR sync ping already generated today:
         - Generate simple random ping within user's available timerange (now...end of day)
      4. Otherwise: Use synchronous time for global coordination
    fallback_logic: "Personal random ping generation when sync ping is invalid"

  exclusion_windows:
    description: "User-defined periods when pings are blocked for safety/convenience"
    implementation: |
      Simpler than complex scheduling: users send 'mute for an hour' commands
      when entering unsafe situations (driving, meetings, etc.)

# -----------------------------------------------------------------------------
# Temporal Synchronization Theory
# -----------------------------------------------------------------------------
synchronization_theory:
  butterfly_effect_limitations: |
    Traditional butterfly effect only affects variables in equations, not the
    equations themselves. Random deviations typically cancel each other out‚Äî
    when flipping 100 coins, approximately 50 will be heads.
  
  synchronized_disruption: |
    When multiple deviations are synchronized (e.g., 10 coins flipped at the same
    moment globally), the predictability breaks down. This disrupts the collective
    attractor equation by making the pattern itself unstable.
  
  collective_field_effects: |
    Date-seeded synchronous pings create an illusion of bigger community while
    serving deeper purpose: disrupting collective temporal patterns through
    coordinated attention shifts. This generates field effects beyond individual
    butterfly effects.

# -----------------------------------------------------------------------------
# Theory Stack
# -----------------------------------------------------------------------------
theory:
  pillars:
    - name: "Unknown-Focus"
      detail: "Direct the user's gaze toward blind spots to maximize novelty."
    - name: "Attention Pattern Disruption"
      detail: "Exploit Cocktail-Party and Baader-Meinhof effects to surface hidden correlations."
    - name: "Temporal Depth Sense"
      detail: "Train users to feel patterns, cycles, and retro-linkages in personal timelines."
    - name: "Holistics & Retrocausality"
      detail: "Position synchronicity as experiential proof of non-linear time."
    - name: "Collective Attractor Disruption"
      detail: "Synchronized temporal attention shifts destabilize predictable pattern equations."
  hype_context: |
    Pandemic lockdowns birthed Randonautica through spatial hunger; geopolitical
    stress now shifts the collective craving toward agency over time.  Claiming
    that 'feeling time' unlocks destiny supplies the needed mythic leverage.

# -----------------------------------------------------------------------------
# Core Features
# -----------------------------------------------------------------------------
features:
  standalone_app: "Self-contained mobile app able to ring without server heartbeat."
  random_signals:
    description: "User specifies an allowable window; N random alarms spawn inside it."
  exclusion_windows: "User blocks unsafe periods (e.g., driving) to preserve UX safety."
  synchronous_signal:
    description: |
      One hidden alarm per day is generated via a deterministic RNG seeded with the
      date's digits of œÄ.  All clients thus ring simultaneously, generating a daily
      'flash-mob' of reports.
    visibility: "Shadow function ‚Äî unlisted at launch to encourage organic discovery."
  future_self_messaging:
    description: |
      Users write notes that are surfaced at a later alarm.  Delivery timing can be
      exact-next or probabilistic to cultivate retrocausal curiosity.
  quantum_rng_optional: "Option to augment with QRNG (e.g., Temporal) for added mystique."
  challenges: 
    description: "Periodic prompts like 'photograph the nearest random object.'"
    community_curation: "Users can vote for challenges to be added to the system."
    cross_referencing: |
      Challenges added later help find connections between user experiences and
      other people's reports, creating reference networks between anomaly reports.
  sigil_embedding: "Magickal glyphs encoded in the binary to diffuse across devices."
  social_integration:
    description: "Links to popular social media for easy posting of anomaly observations"
    platforms: "Direct integration with major social platforms for frictionless sharing"

# -----------------------------------------------------------------------------
# Surprise Amplifiers (UX Heuristics)
# -----------------------------------------------------------------------------
surprise_factors:
  low_visibility: true   # Night, fog.
  strange_sounds: true   # Auditory anomalies.
  unexpected_encounters: true  # Wildlife, strangers.
  perceived_risk: true   # Danger/fear elements escalate emotional valence.
  note: |
    Editorial Note: Emotional amplitude scales share-worthiness; design cues
    should bias toward environments rich in these factors without endangering the
    user.

# -----------------------------------------------------------------------------
# Implementation Notes
# -----------------------------------------------------------------------------
implementation:
  baseline_rng: "Mersenne Twister"  # Deterministic, well-tested.
  seed_strategy: "Daily œÄ-digits for synchronicity; system entropy for personal pings."
  scaling_model: "Fully client-side; zero incremental server cost."
  content_sharing:
    default_platforms: ["TikTok", "Instagram", "Threads"]
    mechanism: "Deep-link from alarm toast to share composer."
  
  ping_queue_management:
    daily_quota_interface: |
      Simple increment/decrement controls for daily ping count with real-time
      preview of next ping schedule.
    mute_functionality: |
      Temporary mute commands rather than complex scheduling interfaces‚Äî
      optimized for spontaneous safety needs.

# -----------------------------------------------------------------------------
# Platform Evolution: Telegram to Mini App
# -----------------------------------------------------------------------------
platform_strategy:
  current_implementation: "Telegram bot with comprehensive ping scheduling and anomaly tracking"
  evolution_path: "Migration to Telegram Mini App for richer user interface"
  mini_app_advantages:
    - "Visual timeline of anomaly detections"
    - "Interactive setup for ping windows"
    - "Rich media viewing of captured anomalies"
    - "Group synchronization visualizations"
    - "Future-self message management interface"
  backend_continuity: "Bot handles scheduling/pinging; Mini App provides UI layer"

# -----------------------------------------------------------------------------
# Deployment & Roadmap
# -----------------------------------------------------------------------------
roadmap:
  phase_1: "Telegram bot prototype with full ping system and anomaly tracking"
  phase_2: "Telegram Mini App interface development"
  phase_3: "Closed beta with memetic seeders to validate synchronicity engagement"
  phase_4: "Public launch accompanied by ARG-style marketing drop"
  phase_5: "Quantum RNG & sigil update pending user feedback"

# -----------------------------------------------------------------------------
# Canonical Truth Clause
# -----------------------------------------------------------------------------
# Any future documentation must reference or extend this canon.yaml. Divergence
# is permissible only via explicit amendment blocks reviewed and approved by the
# Chronomancy editorial collective (üèµÔ∏èy e s hüèµÔ∏è, d0ublezer0, Samim, Kat, Mat1e).

# -----------------------------------------------------------------------------
# Entropy Architecture (RNG Stack)
# -----------------------------------------------------------------------------
entropy_and_rng:
  justification: |
    Editorial Note (üèµÔ∏èy e s hüèµÔ∏è): "Deterministic œÄ-seeds are elegant, but the
    magic feels deeper when we let the universe wiggle the dice itself."
  sources:
    - id: "PI_SEED"
      title: "œÄ-seed (date-deterministic)"
      description: "The existing default ‚Äì reproducible daily seed based on digits of œÄ."
    - id: "CURBY"
      title: "Curby Quantum Beacon"
      description: |
        512-bit SHA-512 pulses from the CU-Boulder randomness beacon
        (<https://random.colorado.edu/>) with status codes per spec
        <https://random.colorado.edu/usage/payloads-status-codes>.
        Fetched hourly, errors fall back to œÄ-seed.
    - id: "MIXED"
      title: "œÄ‚ÜîCurby Interleaved (loss-less)"
      description: |
        Loss-less <bit-interleaving combiner> that alternates single bits from
        œÄ-seed and Curby beacon (a1 b1 a2 b2 ‚Ä¶).  This preserves any original
        bias (Scott Wilber, *Bias Amplification* doctrine) while doubling bit
        rate.  Default for newcomers.
    - id: "QRNG_DAEMON"
      title: "Local QRNG-daemon"
      description: |
        Raw quantum bits streamed from the user's on-prem QRNG-daemon service
        (e.g., http://127.0.0.1:41173/api/v1/bits).  Provides low-latency,
        high-bandwidth entropy; bias untouched.
    - id: "MIXED_QRNG"
      title: "œÄ‚ÜîQRNG Interleaved"
      description: "Loss-less bit-interleaving of œÄ-seed with local QRNG-daemon."
    - id: "PCQNG"
      title: "PCQNG Temporal Jitter RNG"
      description: |
        Legacy temporal RNG originally shipped with ME Trainer (2020).  It
        derives entropy from 1 kHz cycle-to-cycle CPU-timestamp jitter and
        therefore keeps micro-intentional bias observable (Scott Wilber).
        Ported verbatim for Chronomancy.
      canonical_constants:
        timer_period_ms: 1                # multimedia timer cadence
        init_to_ramp_threshold: 3         # tscDiff samples
        ramp_to_normal_threshold: 1000    # tscDiff samples
        lpfilter_lengths:
          ramp: 100
          normal_narrow: 100
          normal_wide: 1000               # ¬±5 % deviation
        quantisation_divisor: 33333       # qFactor = LPF / 33333
        calibration_notes:
          hardware_dependency: |
            Original: 33 333 = calibrated divisor for ~3.3 GHz rdtsc hardware
            giving ~3.3M cycles/ms. Port challenge: nanosecond timers yield
            ~1M ns/ms (different scale). The LPF‚Üíquantizer pipeline must
            preserve statistical distribution of eBits (0-255 envelope).
          adaptive_behavior: |
            The LPF uses *dynamic length* based on ratio threshold:
            - Normal: ratio ‚àà [0.95, 1.05] ‚Üí length=100 (narrow window)
            - Outlier: ratio ‚àâ [0.95, 1.05] ‚Üí length=1000 (wide window)
            This creates natural adaptation without manual recalibration.
          port_strategy: |
            1. Collect 1000 timing samples during RampUp (exactly as original)
            2. Compute LPF_mean after ramp completes
            3. Set divisor_dyn = LPF_mean / 130.7 (preserves original eBits mean)
            4. Verify eBits histogram matches original via œá¬≤ test
        lfsr_polynomial_taps: [0, 13, 30, 37, 48]  # feedback into bit-62 (63-bit)
        corrected_packet:
          discard_warmup_packets: 10
          repeats_per_byte: 4
          bytes_per_packet: 17
          bits_per_corrected_byte: 7
        lfsr_seed: 0xAAAAAAAAAAAAAAAA      # canonical 63-bit start value
        ratio_threshold:
          high: 1.05
          low: 0.95

# -----------------------------------------------------------------------------
# Implementation roadmap for PCQNG port (added 2025-06-25)
# -----------------------------------------------------------------------------
pcqng_port_plan: |
  ‚Ä¢ Phase A ‚Äì Python reference: use time.perf_counter_ns() to validate
    bit-stream parity against original binary samples.
  ‚Ä¢ Phase B ‚Äì WebWorker implementation: 1 ms setInterval loop, high-res
    performance.now(); mirrors all constants above.  Exposes SharedArray
    for fast inter-thread transfer.
  ‚Ä¢ Phase C ‚Äì Optional WebAssembly build, compiled from original C++ without
    rdtsc call (timestamp injected by host).  Only if performance tests
    show JavaScript bottleneck.
  ‚Ä¢ Phase D ‚Äì Integrate as selectable entropy source (INTERLEAVE modes and
    SELECTIVE routing apply).

# -----------------------------------------------------------------------------
# Collective Synchronicity NLP Network
# -----------------------------------------------------------------------------
collective_synchronicity_network:
  access_policy: "Groups can opt-in to give the bot message access (read-only)."
  benefits: "Opt-in groups gain advanced analytics & synchrony prompts."
  pipeline:
    - "Ingest messages ¬±30 min around temporal attractors."
    - "Run lightweight NLP to extract entities, emotions, symbols."
    - "Store symbol graph in relational DB (symbol ‚Üî user ‚Üî timestamp)."
    - "Perform Jungian depth analysis on aggregate symbolism."
    - "Generate communal narrative dreams through Gen-AI summarizers."
  expertise_anchor: "Samim (@samimfnord) will advise on dream-narrative generation."

# -----------------------------------------------------------------------------
# Long-Term Vision ‚Äì Intention-Based Temporal Search
# -----------------------------------------------------------------------------
future_vision:
  quantum_like_entropy_stream: "Client devices left open continuously stream micro-temporal jitter as community entropy."
  probability_field_shaping: |
    Bias amplification + Bayesian decision processes identify optimal
    time-windows for desired outcomes ("chronomantic alignment").
  glyphica_link: "Entropy feeds 'Intention Glyph' generator (project Glyphica)."
  derivatives_market: |
    Swiss Verein + immutable entropy ledger ‚Üí regulated derivatives market
    where sceptics can bet against chronomancers' ability to influence data.
